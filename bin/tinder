#!/usr/bin/env python3
# This file is placed in the Public Domain.


"objects"


import inspect
import os
import queue
import shutil
import sys
import threading
import time
import typing
import _thread


sys.path.insert(0, os.getcwd())


from objx.command import Commands, command, parse
from objx.locater import find
from objx.objects import Object, fmt, items
from objx.package import Table
from objx.persist import Workdir, long, skel, types
from objx.reactor import Client, Default, Message
from objx.threads import launch
from objx.utility import elapsed


STARTTIME = time.time()


param = Object()
param.dpl = ["hnrss title,url", ""]
param.imp = ["tests/feeds.opml", ""]
param.nme = ["hnrss hackernews", ""]
param.pwd = ["bla mekker", ""]
param.rem = ["hnrss", ""]
param.res = ["hnrss"]
param.srv = [""]
param.thr = [""]
param.ver = [""]
param.cmd = [""]
param.mod = [""]
param.mre = [""]
param.exp = ['']
param.fnd = ["log", "rss", "config"]
param.dne = ["mekker", ""]


pre = Object()
pre.log = ["bla", ""]
pre.cfg = ["cfg nick=mekker", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]


cblock      = threading.RLock()
displaylock = threading.RLock()


if os.path.exists("mods"):
    import mods as MODS
else:
    MODS = None


cfg   = Default()
cfg.name = "objx"


p     = os.path.join
pname = f"{cfg.name}.modules"


events = []


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def announce(self, txt):
        pass

    def raw(self, txt):
        print(txt.encode('utf-8', 'replace').decode("utf-8"))


class Console(CLI):

    def announce(self, txt):
        pass

    def callback(self, evt):
        CLI.callback(self, evt)
        evt.wait()

    def poll(self):
        evt = Message()
        evt.txt = input("> ")
        evt.type = "command"
        return evt

"utilities"


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{cfg.name.upper()} since {tme}")


def check(txt):
    args = sys.argv[1:]
    for arg in args:
        if not arg.startswith("-"):
            continue
        for c in txt:
            if c in arg:
                return True
    return False


def forever():
    while True:
        try:
            time.sleep(0.1)
        except (KeyboardInterrupt, EOFError):
            _thread.interrupt_main()


"scripts"


def console():
    import readline # noqa: F401
    Commands.add(cmd)
    Commands.add(fnd)
    parse(cfg, " ".join(sys.argv[1:]))
    cfg.init = cfg.sets.init or cfg.init
    cfg.opts = cfg.opts
    if "v" in cfg.opts:
        banner()
    csl = Console()
    csl.start()


def control():
    if len(sys.argv) == 1:
        return
    Commands.add(cmd)
    Commands.add(fnd)
    parse(cfg, " ".join(sys.argv[1:]))
    csl = CLI()
    evt = Message()
    evt.orig = repr(csl)
    evt.type = "command"
    evt.txt = cfg.otxt
    command(evt)
    evt.wait()


"commands"


def cmd(event):
    event.reply(",".join(sorted(Commands.cmds)))


def fnd(event):
    if not event.rest:
        event.reply("fnd <workdir> <type>")
        return
    args = event.rest.split()
    Workdir.wdr = os.path.abspath(args[0])
    if len(args) == 1:
        res = sorted([x.split('.')[-1].lower() for x in types()])
        if res:
            event.reply(",".join(res))
        return
    otype = args[1]
    clz = long(otype)
    nmr = 0
    for fnm, obj in list(find(clz, event.gets)):
        event.reply(f"{nmr} {fmt(obj)}")
        nmr += 1
    if not nmr:
        event.reply("no result")


"tinder"


def consume(evts):
    done = []
    for event in evts:
        event.wait()
        done.append(event)
    for todo in done:
        events.remove(todo)
    return done


def payload(clt, cmds):
    nmr = 0
    for cmd, examples in items(cmds):
        for example in examples:
            event = Message()
            event.txt = cmd + " " + example
            event.type = "command"
            events.append(event)
            clt.put(event)
            nmr += 1
    return nmr



"runtime"


def wrap(func):
    import termios
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)


def main():
    global nrs
    global nrcommand
    parse(cfg, " ".join(sys.argv[1:]))
    Workdir.wdr = ".test"
    for mod in Table.all(MODS):
        Commands.scan(mod)
        mod.DEBUG = True
    nrcommand = len(Commands.cmds) or 1
    if "v" in cfg.opts:
        banner()
        print("verbose is on")
    if "f" not in cfg.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = cfg.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, pre))
    for thr in thrs:
        thr.join()
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, param))
    for thr in thrs:
        thr.join()
    consume(events)
    clt.stop()
    if "w" in cfg.opts:
        clt.wait()


if __name__ == "__main__":
    wrap(main)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrs*nrcommand)
    if "b" in cfg.opts:
        Thread.bork = True
    if "v" in cfg.opts:
        if events:
            for evt in events:
                print(evt)
            print(f"{len(events)} events")
        print(f"{lap} {nrs} {nrcommand} {percall}")
    sys.stdout.flush()
    sys.exit(0)




def main():
    if check("c"):
        wrap(console)
    else:
        control()


if __name__ == "__main__":
    main()
    sys.exit(0)
